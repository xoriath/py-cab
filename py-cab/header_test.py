import unittest

import header

# From https://msdn.microsoft.com/en-us/library/bb417343.aspx#sample_cab
TEST_CAB = bytearray([0x4D, 0x53, 0x43, 0x46, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 
                      0x22, 0x06, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x22, 0xBA, 0x59, 0x20, 0x00, 0x68, 0x65, 0x6C, 0x6C, 
                      0x6F, 0x2E, 0x63, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x22, 
                      0xE7, 0x59, 0x20, 0x00, 0x77, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x2E, 0x63, 0x00, 0xBD, 0x5A, 
                      0xA6, 0x30, 0x97, 0x00, 0x97, 0x00, 0x23, 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65, 0x20, 0x3C, 
                      0x73, 0x74, 0x64, 0x69, 0x6F, 0x2E, 0x68, 0x3E, 0x0D, 0x0A, 0x0D, 0x0A, 0x76, 0x6F, 0x69, 0x64, 
                      0x20, 0x6D, 0x61, 0x69, 0x6E, 0x28, 0x76, 0x6F, 0x69, 0x64, 0x29, 0x0D, 0x0A, 0x7B, 0x0D, 0x0A, 
                      0x20, 0x20, 0x20, 0x20, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x66, 0x28, 0x22, 0x48, 0x65, 0x6C, 0x6C, 
                      0x6F, 0x2C, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x5C, 0x6E, 0x22, 0x29, 0x3B, 0x0D, 0x0A, 
                      0x7D, 0x0D, 0x0A, 0x23, 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65, 0x20, 0x3C, 0x73, 0x74, 0x64, 
                      0x69, 0x6F, 0x2E, 0x68, 0x3E, 0x0D, 0x0A, 0x0D, 0x0A, 0x76, 0x6F, 0x69, 0x64, 0x20, 0x6D, 0x61, 
                      0x69, 0x6E, 0x28, 0x76, 0x6F, 0x69, 0x64, 0x29, 0x0D, 0x0A, 0x7B, 0x0D, 0x0A, 0x20, 0x20, 0x20, 
                      0x20, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x66, 0x28, 0x22, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 
                      0x21, 0x5C, 0x6E, 0x22, 0x29, 0x3B, 0x0D, 0x0A, 0x7D, 0x0D, 0x0A, 0x0D, 0x0A])

class TestHeader(unittest.TestCase):

    def setUp(self):
        self.header = header.Header(TEST_CAB)

    def test_signature(self):
        self.assertEqual('MSCF', self.header.signature)

    def test_size(self):
        self.assertEqual(0xFD, self.header.size)

    def test_file_offset(self):
        self.assertEqual(0x2C, self.header.first_file_enty_offset)

    def test_version(self):
        self.assertTupleEqual((1, 3), self.header.version)

    def test_number_of_folders(self):
        self.assertEqual(1, self.header.number_of_folders)
    
    def test_number_of_files(self):
        self.assertEqual(2, self.header.number_of_files)

    def test_flags(self):
        self.assertEqual(0, self.header.header.flags)

    def test_set_id(self):
        self.assertEqual(0x0622, self.header.set_id)

    def test_cabinet_number(self):
        self.assertEqual(0, self.header.sequence)

    def test_optional_is_empty(self):
        self.assertEqual(0, self.header.reserved_in_header)
        self.assertEqual(0, self.header.reserved_in_folder)
        self.assertEqual(0, self.header.reserved_in_data)
        self.assertEqual([], self.header.previous_cabinet)
        self.assertEqual([], self.header.previous_disk)
        self.assertEqual([], self.header.next_cabinet)
        self.assertEqual([], self.header.next_disk)
        self.assertEqual([], self.header.reserved_data)

    def test_header_size(self):
        self.assertEqual(0x24, self.header.header_size)
